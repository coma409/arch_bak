#==========================================================#
#                                                          #
# ███╗   ███╗██╗   ██╗    ██╗     ███████╗██████╗  ██████╗ #
# ████╗ ████║╚██╗ ██╔╝    ██║     ██╔════╝██╔══██╗██╔════╝ #
# ██╔████╔██║ ╚████╔╝     ██║     █████╗  ██████╔╝██║      #
# ██║╚██╔╝██║  ╚██╔╝      ██║     ██╔══╝  ██╔══██╗██║      #
# ██║ ╚═╝ ██║   ██║       ███████╗██║     ██║  ██║╚██████╗ #
# ╚═╝     ╚═╝   ╚═╝       ╚══════╝╚═╝     ╚═╝  ╚═╝ ╚═════╝ #
#                                                          #
#==========================================================#

# Basic Settings
set shell zsh
set shellopts '-euy'
set ifs "\n"
set filesep "\n"  # default already

set scrolloff 10

set hidden
set ignorecase
set icons
set info size

set previewer "~/.config/lf/preview.sh"

# Custom functions
cmd on-cd ${{
	# display git repository status in your prompt
	source /usr/share/git/completion/git-prompt.sh
	GIT_PS1_SHOWCONFLICTSTATE=auto
	GIT_PS1_SHOWDIRTYSTATE=auto
	GIT_PS1_SHOWSTASHSTATE=auto
	GIT_PS1_SHOWUNTRACKEDFILES=auto
	GIT_PS1_SHOWUPSTREAM=auto
	GIT_PS1_COMPRESSSPARSESTATE=auto
	git=$(__git_ps1 " [GIT BRANCH:> %s]") || true
	fmt="\033[32;1m%u@%h\033[0m:\033[34;1m%w\033[0m\033[33;1m$git\033[0m"
	lf -remote "send $id set promptfmt \"$fmt\""
}}

cmd git_branch ${{
    git branch | fzf | xargs git checkout
    pwd_shell=$(pwd)
    lf -remote "send $id updir"
    lf -remote "send $id cd \"$pwd_shell\""
}}

cmd git_status ${{
	clear
	git status
	echo "press ENTER"
	read ENTER
}}

cmd git_commit ${{
	clear
	git commit -a
}}

cmd git_pull ${{
	clear
	git pull --rebase || true
	echo "press ENTER"
	read ENTER
}}

cmd git_push ${{
	clear
	git push
}}

cmd git_log ${{
	clear
	git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
}}

cmd screenshot %{{
	printf "Set Shot Mode: (s)Shot (f)Frame (w)Windows -- "
	read mode
	ctime="$(echo $(date '+%Y-%m-%d_%H:%M:%S'))"
	if [ "$mode" = "s" ]; then
		printf "Screen Shot"
		import "$HOME/Pictures/screenshot/shot_$ctime.png"
	elif [ "$mode" = "f" ]; then
		printf "Screen Frame Shot"
		import -frame "$HOME/Pictures/screenshot/frame_$ctime.png"
	elif [ "$mode" = "w" ]; then
		printf "Screen Windows Shot"
		import -windows root "$HOME/Pictures/screenshot/windows_$ctime.png"
	fi
}}

cmd bulk-rename ${{
	old="$(mktemp)"
	new="$(mktemp)"
	if [ -n "$fs" ]; then
		fs="$(basename -a $fs)"
	else
		fs="$(ls)"
	fi
	printf '%s\n' "$fs" >"$old"
	printf '%s\n' "$fs" >"$new"
	$EDITOR "$new"
	[ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
	paste "$old" "$new" | while IFS= read -r names; do
		src="$(printf '%s' "$names" | cut -f1)"
		dst="$(printf '%s' "$names" | cut -f2)"
		if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
			continue
		fi
		mv -- "$src" "$dst"
	done
	rm -- "$old" "$new"
	lf -remote "send $id unselect"
}}

#cmd mkdir $mkdir -p "$(echo $* | tr ' ' '/ ')"

cmd mkdir %{{
	printf "Directory Name: "
	read dir
	mkdir -p $dir
	lf -remote "send $id cd \"$dir\""
}}

#cmd mkfile $$EDITOR "$(echo $*)"

cmd mkfile %{{
	printf "File Name: "
	read fname
	touch $fname
	lf -remote "send $id select "$fname""
#	lf -remote "send $id editor_nvim"
#	lf -remote "send $id editor_vim"
}}

cmd mkfile_executable %{{
	set -f
	printf "Executable(x) Inexecutable(i) -- "
	read mode
	if [ "$mode" = "x" ]; then
		printf "set files to executable"
		chmod +x $f
	elif [ "$mode" = "i" ]; then
		printf "set files to inexecutable"
		chmod -x $f
	fi
}}


cmd editor_vim $vim "$f"

cmd editor_nvim $nvim "$f"

cmd yank_dir $dirname -- "$f" | head -c-1 | xclip -i -selection clipboard

cmd yank_path $printf '%s' "$fx" | xclip -i -selection clipboard

cmd yank_name_full $basename -a -- $fx | head -c-1 | xclip -i -selection clipboard

cmd yank_name_without_extension ${{
    echo "$fx" |
      xargs -r -d '\n' basename -a |
      awk -e '{
        for (i=length($0); i > 0; i--) {
          if (substr($0, i, 1) == ".") {
            if (i == 1) print $0
            else print substr($0, 0, i-1)

            break
          }
        }

        if (i == 0)
          print $0
      }' |
      if [ -n "$fs" ]; then cat; else tr -d '\n'; fi |
      xclip -i -selection clipboard
}}

cmd paste-overwrite ${{
	mode=$(head -1 ~/.local/share/lf/files)
	list=$(sed 1d ~/.local/share/lf/files)
	if [ $mode = 'copy' ]; then
		cp -r $list .
	elif [ $mode = 'move' ]; then
		mv $list .
	fi
	lf -remote 'send load'
	lf -remote 'send clear'
}}

cmd fzf_jump ${{
	res="$(find . -maxdepth 1 | fzf --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
	if [ -d "$res" ] ; then
		cmd="cd"
	elif [ -f "$res" ] ; then
		cmd="select"
	else
		exit 0
	fi
	lf -remote "send $id $cmd \"$res\""
}}

cmd fzf_search ${{
	res="$( \
		RG_PREFIX="rg --column --line-number --no-heading --color=always \
			--smart-case "
		FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
			fzf --bind "change:reload:$RG_PREFIX {q} || true" \
			--ansi --layout=reverse --header 'Search in files' \
			| cut -d':' -f1
	)"
	[ ! -z "$res" ] && lf -remote "send $id select \"$res\""
}}

cmd open &{{
	case $(file --mime-type -Lb $f) in
		text/*) lf -remote "send $id \$$EDITOR \$fx";;
		*) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
	esac
}}

cmd trash %set -f; mv $fx ~/.trash

cmd extract %{{
	set -f
	case $f in
		*.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
		*.tar.gz|*.tgz) tar xzvf $f;;
		*.tar.xz|*.txz) tar xJvf $f;;
		*.zip) unzip $f;;
		*.rar) unrar x $f;;
		*.7z) 7z x $f;;
	esac
}}

cmd tar %{{
	set -f
	printf "to tar.gz "
	read tname
	mkdir $tname
	cp -r $fx $tname
	tar czf $tname.tar.gz $tname
	rm -rf $tname
}}

cmd zip %{{
	set -f
	printf "to zip "
	read zname
	mkdir $zname
	cp -r $fx $zname
	zip -r $zname.zip $zname
	rm -rf $zname
}}

# Remove some default key map
map m
map y
map p
map e
map d
map r
map f
map a
map s

# Custom key map functions
map yy copy                         # Copy selected items
map yp yank_path                    # Copy current item path
map ynf yank_name_full              # Copy current item full name
map ynb yank_name_without_extension # Copy current item basename
map yd yank_dir                     # Copy current item directory
map dd cut                          # Cut select items
map dD delete                       # Delete select items
map pp paste                        # Paste items in current directory
map po paste-overwrite              # Paste & overwrite items in current directory
map rf rename                       # Rename current item
map ra bulk-rename                  # Rename selected items
map ff :filter                      # Flite items by name, in current directory
map fj :fzf_jump                    # Search & Jump to somewhere, in current directory
map fr :fzf_search                  # Search archive's content, in current directory
map ev editor_vim                   # Edit currnet file with vim
map en editor_nvim                  # Edit currnet file with nvim
map ms mark-save                    # Save mark
map mf mkfile                       # Make a new file
map me mkfile_executable            # Make a file to executable
map md mkdir                        # Make a new directory & Set current directory into it
map sw screenshot                   # Screen Shot
map <enter> shell                   # Shell
map ax extract                      # Extract selected archives
map acg tar                         # Compress items to tar.gz archive
map acz zip                         # Compress items to zip archive
map gb git_branch
map gs git_status
map gl git_log
map gc git_commit
map gps git_push
map gpl git_pull
